<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>Title</title>
</head>

<body>
  <h1>Hello World</h1>

</body>
<script>
  const clientId = '33dc8ba580774d068c2d72fc9fb0db2d';
  const redirectUri = 'http://localhost:8080/logged';

  const scope = 'user-read-private user-read-email user-library-read playlist-modify-public playlist-modify-private';
  const authUrl = new URL("https://accounts.spotify.com/authorize")
  const generateRandomString = (length) => {
    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const values = crypto.getRandomValues(new Uint8Array(length));
    return values.reduce((acc, x) => acc + possible[x % possible.length], "");
  }

  const codeVerifier = generateRandomString(64);
  const sha256 = async (plain) => {
    const encoder = new TextEncoder()
    const data = encoder.encode(plain)
    return window.crypto.subtle.digest('SHA-256', data)
  }
  const base64encode = (input) => {
    return btoa(String.fromCharCode(...new Uint8Array(input)))
      .replace(/=/g, '')
      .replace(/\+/g, '-')
      .replace(/\//g, '_');
  }
  const hashed = sha256(codeVerifier).then((hashed) => {
    const codeChallenge = base64encode(hashed);

    const params = {
      response_type: 'code',
      client_id: clientId,
      scope,
      redirect_uri: redirectUri,
      code_challenge_method: 'S256',
      code_challenge: codeChallenge,
      redirect_uri: redirectUri,
    }
    window.localStorage.setItem('code_verifier', codeVerifier);

    authUrl.search = new URLSearchParams(params).toString();
    window.location.href = authUrl.toString();
  })

</script>

</html>